syntax = "proto3";

package communication;
option go_package = "github.com/ba2025-ysmprc/frr-tui/backend/pkg;pkg";
	

import "google/protobuf/timestamp.proto";

// Message represents the top-level message structure
message Message {
  string service = 1;
  string command = 2;
  map<string, Value> params = 3;
}

// Command represents a specific command
message Command {
  string command = 1;
  string action = 2;
  map<string, Value> params = 3;
}

// Response represents the server's response
message Response {
  string status = 1;
  string message = 2;
  Value data = 3;
}

// Value represents a dynamic value (similar to interface{} in Go)
message Value {
  oneof kind {
    string string_value = 1;
    int64 int_value = 2;
    double double_value = 3;
    bool bool_value = 4;
    Struct struct_value = 5;
    ListValue list_value = 6;
    bytes bytes_value = 7;
    
    // Aggregator service message types
    CombinedState combined_state = 8;
    OSPFMetrics ospf_metrics = 9;
    OSPFNeighbor ospf_neighbor = 10;
    OSPFRoute ospf_route = 11;
    OSPFInterface ospf_interface = 12;
    OSPFlsa ospf_lsa = 13;
    NetworkConfig network_config = 14;
    OSPFArea ospf_area = 15;
    OSPFInterfaceConfig ospf_interface_config = 16;
    SystemMetrics system_metrics = 17;
    InterfaceStats interface_stats = 18;

    // Analyzer command message types
    Anomalies anomalies = 19;

    // New Aggregator service message types
    OSPFRouterData ospf_router_data = 20;

  }
}

// Struct represents a map of string to Value (similar to map[string]interface{})
message Struct {
  map<string, Value> fields = 1;
}

// ListValue represents a list of Values (similar to []interface{})
message ListValue {
  repeated Value values = 1;
}

// ================ Aggregator payload Messages ================

// ================ NEW setup ================

message StaticFRRConfiguration {
  string hostname = 1;
  string frr_version = 2;
  // string frr_defaults = 3;
  bool ipv6_forwarding = 4;
  bool ipv4_forwarding = 5;
  bool service_advanced_vty = 6;
  // bool service_integrated_vtysh_config = 7;

  repeated Interface interfaces = 8;
  repeated StaticRoute static_routes = 9;
  OSPFConfig ospf_config = 10;
  map<string, RouteMap> route_map = 11;
  map<string, AccessList> access_list = 12;
}

message Interface {
  string name = 1;
  repeated IPPrefix ip_address = 2;
  string area = 3;
  bool passive = 4;
  // Optional: cost, dead-interval, hello-interval
}

message StaticRoute {
  IPPrefix ip_prefix = 1;
  string next_hop = 2;
}

message OSPFConfig {
  string router_id = 1;
  repeated Redistribution redistribution = 2;
  repeated Area area = 3;
}

message Redistribution {
  string type = 1;
  string metric = 2;
  string route_map = 3;
}

message Area {
  string name = 1;
  string type = 2; // transit (virtual-link) is an area type because itâ€™s not possible to be nssa/stub AND transit-area
}

message RouteMap {
  uint32 permit = 1;
  string match = 2;
  string access_list = 3;
}

message AccessList {
  string name = 1;
  repeated AccessListItem item = 2;
}

message AccessListItem {
  uint32 sequence = 1;
  string access_control = 2;
  string network = 3; // "any" or IP/CIDR
}

message IPPrefix {
  string ip_address = 1;
  uint32 prefix_length = 24;
}

// ================ OLD setup ================
message CombinedState {
  google.protobuf.Timestamp timestamp = 1;
  OSPFMetrics ospf = 2;
  NetworkConfig config = 3;
  SystemMetrics system = 4;
}

message OSPFMetrics {
  repeated OSPFNeighbor neighbors = 1;
  repeated OSPFRoute routes = 2;
  repeated OSPFInterface interfaces = 3;
  repeated OSPFlsa lsas = 4;
  bool has_route_changes = 5;
}

message OSPFNeighbor {
  string id = 1;
  string ip = 2;
  string state = 3;
  string interface = 4;
  string area = 5;
}

message OSPFRoute {
  string prefix = 1;
  string next_hop = 2;
  string interface = 3;
  int32 cost = 4;
  string type = 5;
  string area = 6;
}

message OSPFInterface {
  string name = 1;
  string area = 2;
  int32 nbr_count = 3;
  int32 nbr_adj = 4;
  bool passive = 5;
}

message OSPFlsa {
  string type = 1;
  string ls_id = 2;
  string adv_router = 3;
  string Sequence = 4;
  int32 age = 5;
  string area = 6;
}

message NetworkConfig {
  string router_id = 1;
  repeated OSPFArea areas = 2;
  repeated OSPFInterfaceConfig interfaces = 3;
}

message OSPFArea {
  string id = 1;
  repeated string networks = 2;
}

message OSPFInterfaceConfig {
  string name = 1;
  string area = 2;
  string IpAddress = 3;
  bool passive = 4;
  int32 cost = 5;
}

message SystemMetrics {
  double cpu_usage = 1;
  double memory_usage = 2;
  repeated InterfaceStats network_stats = 3;
}

message InterfaceStats {
  string name = 1;
  uint64 rx_bytes = 2;
  uint64 tx_bytes = 3;
  uint64 rx_errors = 4;
  uint64 tx_errors = 5;
  string oper_state = 6;
}

// ================ Aggregator LSA Router ====================

message OSPFRouterData {
  string router_id = 1;
  map<string, OSPFRouterArea> router_states = 2;
}

message OSPFRouterArea {
  map<string, OSPFRouterLSA> lsa_entries = 1;
}

message OSPFRouterLSA {
  int32 lsa_age = 1;
  string options = 2;
  int32 lsa_flags = 3;
  int32 flags = 4;
  bool asbr = 5;
  string lsa_type = 6;
  string link_state_id = 7;
  string advertising_router = 8;
  string lsa_seq_number = 9;
  string checksum = 10;
  int32 length = 11;
  int32 num_of_links = 12;
  map<string, OSPFRouterLSALink> router_links = 13;
}

message OSPFRouterLSALink {
  string link_type = 1;
  string designated_router_address = 2;
  string router_interface_address = 3;
  string network_address = 4;
  string network_mask = 5;
  int32 num_of_tos_metrics = 6;
  int32 tos0_metric = 7;
}

// ================ Analyzer payload Messages ================

// Main message containing all anomaly types
message Anomalies {
  repeated AnomalyOveradvertisedRoute overadvertised_routes = 1;
  repeated AnomalyUnderadvertisedRoute underadvertised_routes = 2;
  repeated AnomalyDuplicateRoute duplicate_routes = 3;
  repeated AnomalyMisconfiguredRoute misconfigured_routes = 4;
}

message AnomalyState {
  bool has_overadvertised_routes = 1;
  bool has_underadvertised_routes = 2;
  bool has_duplicate_routes = 3;
  bool has_misconfigured_routes = 4;
}

// Router information
message RouterAttribute {
  string router_name = 1;
  string router_id = 2;
}

// Route is advertised but should not be
message AnomalyOveradvertisedRoute {
  google.protobuf.Timestamp timestamp = 1;
  string service = 2;
  string is_advertised = 3;
  string should_advertised = 4;
  RouterAttribute router = 5;
}

// Route should be advertised but is not
message AnomalyUnderadvertisedRoute {
  google.protobuf.Timestamp timestamp = 1;
  string service = 2;
  string is_advertised = 3;
  string should_advertised = 4;
  RouterAttribute router = 5;
}

// Route is advertised multiple times when it should be advertised once
message AnomalyDuplicateRoute {
  google.protobuf.Timestamp timestamp = 1;
  string service = 2;
  string is_advertised = 3;
  string should_advertised = 4;
  RouterAttribute router = 5;
}

// Wrong advertisment, not fitting any above
message AnomalyMisconfiguredRoute {
  google.protobuf.Timestamp timestamp = 1;
  string service = 2;
  string is_advertised = 3;
  string should_advertised = 4;
  RouterAttribute router = 5;
}